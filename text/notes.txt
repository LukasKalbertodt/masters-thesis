- Rust grob erklären (die wichtigen Konzepte)
  - Grundlagen: Syntax
  - Traits
  - Iteratoren
  - Codegen/LLVM

- Grundlagen zu Geometrieverarbeitung
  - Welche Libraries gibt es? Vergleich.
  - Welche Datenstrukturen?

- Vergleich
  - Vergleich Code-Länge
  - Benchmarks
    - OpenMesh vs. lox
    - HEM vs. ???


- Designentscheidungen lox
  - Handles (strongly typed, integer size) & Refs
  - Adj traits
    - Idee: auch externe Typen sollen das implementieren (aber erstmal nicht)
  - Andere Mesh traits
  - Algorithmen Signaturen
  - IO traits
  - cast
  - derives

- Optimizations
  - stable vec
  - bound checks in HEM
  - STL: hashmap
  - PLY: function pointer stuff
  - Array of structs vs. Struct of arrays
    - Daher Hauptentscheidung: synchronisierte Arrays


- Rust Einschränkungen
  - GATs und Iteratoren sowie `PropMap`
  - Specialization (FnMap) ~
  - Aliasing xor Mutability teilweise problematisch
  - In 2019 Roadmap geplant
